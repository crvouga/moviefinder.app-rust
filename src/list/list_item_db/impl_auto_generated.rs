use super::interface::{ListItemDb, ListItemQuery};
use crate::{
    core::{pagination::Paginated, unit_of_work::UnitOfWork},
    list::core::list_item::ListItem,
    media::interaction::interaction_db::interface::MediaInteractionDb,
};
use async_trait::async_trait;
use std::sync::Arc;

pub struct ImplAutoGenerated {
    _media_interaction_db: Arc<dyn MediaInteractionDb>,
}

impl ImplAutoGenerated {
    #[allow(dead_code)]
    pub fn new(_media_interaction_db: Arc<dyn MediaInteractionDb>) -> Self {
        Self {
            _media_interaction_db,
        }
    }
}

#[async_trait]
impl ListItemDb for ImplAutoGenerated {
    async fn query(&self, _query: ListItemQuery) -> Result<Paginated<ListItem>, std::io::Error> {
        unimplemented!();
    }
    async fn upsert(
        &self,
        _uow: UnitOfWork,
        _list_items: Vec<ListItem>,
    ) -> Result<(), std::io::Error> {
        unimplemented!();
    }
}
