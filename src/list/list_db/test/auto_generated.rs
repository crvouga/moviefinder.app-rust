#[cfg(test)]
mod tests {
    use std::sync::Arc;

    use crate::{
        core::query::{Query, QueryFilter, QueryOp},
        fixture::BaseFixture,
        list::{
            core::{
                list::{List, ListVariant},
                list_joined::ListJoined,
            },
            list_db::{
                impl_auto_generated::ImplAutoGenerated,
                interface::{ListDb, ListQuery, ListQueryField},
            },
        },
    };

    struct Fixture {
        list_db: Arc<dyn ListDb>,
    }

    async fn fixtures() -> Vec<Fixture> {
        let mut fixtures: Vec<Fixture> = vec![];

        let base = BaseFixture::new().await;

        fixtures.push(Fixture {
            list_db: Arc::new(ImplAutoGenerated::new(
                base.ctx.media_interaction_db.clone(),
            )),
        });

        fixtures
    }

    #[tokio::test]
    async fn test_query_auto_generated_list() {
        for f in fixtures().await {
            let list = List::default();
            let list = ListJoined {
                list,
                list_items: vec![],
            };

            let query: ListQuery = Query {
                limit: 10,
                offset: 0,
                filter: QueryFilter::Clause(
                    ListQueryField::UserId,
                    QueryOp::Eq,
                    list.list.creator_user_id.as_str().to_string(),
                ),
            };

            let queried = f.list_db.query(query.clone()).await;

            let paginated = queried.unwrap();
            assert!(!paginated.items.is_empty());
            assert!(paginated
                .items
                .iter()
                .all(|l| matches!(l.variant, ListVariant::AutoGenerated(_))));
        }
    }
}
