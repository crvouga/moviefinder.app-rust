use super::interface::{ListDb, ListQuery, ListQueryField};
use crate::{
    core::{
        pagination::Paginated,
        posix::Posix,
        query::{QueryFilter, QueryOp},
        unit_of_work::UnitOfWork,
    },
    list::core::list::{List, ListVariant},
    media::interaction::{
        interaction_db::interface::MediaInteractionDb, interaction_name::InteractionName,
    },
    user::user_id::UserId,
};
use async_trait::async_trait;
use std::sync::Arc;

pub struct ImplAutoGenerated {
    _media_interaction_db: Arc<dyn MediaInteractionDb>,
}

impl ImplAutoGenerated {
    #[allow(dead_code)]
    pub fn new(_media_interaction_db: Arc<dyn MediaInteractionDb>) -> Self {
        Self {
            _media_interaction_db,
        }
    }
}

#[async_trait]
impl ListDb for ImplAutoGenerated {
    async fn query(&self, query: ListQuery) -> Result<Paginated<List>, std::io::Error> {
        let creator_user_id = match query.filter {
            QueryFilter::Clause(ListQueryField::UserId, QueryOp::Eq, s) => UserId::new(&s),
            _ => {
                return Err(std::io::Error::new(
                    std::io::ErrorKind::InvalidInput,
                    "Unsupported query. Missing user id",
                ))
            }
        };

        let all_interaction_names = vec![
            InteractionName::Liked,
            InteractionName::Disliked,
            InteractionName::Seen,
            InteractionName::NotSeen,
            InteractionName::Interested,
            InteractionName::NotInterested,
        ];

        let lists = all_interaction_names.iter().map(|interaction_name| List {
            id: interaction_name.to_list_id(creator_user_id.clone()),
            created_at_posix: Posix::default(),
            updated_at_posix: Posix::default(),
            deleted_at_posix: None,
            name: interaction_name.to_list_description().to_string(),
            description: interaction_name.to_list_description().to_string(),
            creator_user_id: creator_user_id.clone(),
            variant: ListVariant::AutoGenerated(interaction_name.clone()),
        });

        let total = lists.clone().count();

        let items = lists.skip(query.offset).take(query.limit).collect();

        Ok(Paginated {
            items,
            total,
            limit: query.limit,
            offset: query.offset,
        })
    }

    async fn put(&self, _uow: UnitOfWork, _list: List) -> Result<(), std::io::Error> {
        Err(std::io::Error::new(
            std::io::ErrorKind::InvalidInput,
            "Unsupported operation for auto generated lists",
        ))
    }
}
