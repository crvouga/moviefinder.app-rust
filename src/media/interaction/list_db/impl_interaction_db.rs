use super::interface::ListDb;
use crate::{
    core::posix::Posix,
    list::{
        list::{List, ListVariant},
        list_id::ListId,
    },
    media::interaction::{
        interaction_db::interface::MediaInteractionDb, interaction_name::InteractionName,
    },
    user::user_id::UserId,
};
use async_trait::async_trait;
use std::sync::Arc;

pub struct ImplInteractionDb {
    _interaction_db: Arc<dyn MediaInteractionDb>,
}

impl ImplInteractionDb {
    #[allow(dead_code)]
    pub fn new(_interaction_db: Arc<dyn MediaInteractionDb>) -> Self {
        Self { _interaction_db }
    }
}

#[async_trait]
impl ListDb for ImplInteractionDb {
    async fn find_by_user_id(&self, user_id: UserId) -> Result<Vec<List>, std::io::Error> {
        let all_interaction_names = vec![
            InteractionName::Liked,
            InteractionName::Disliked,
            InteractionName::Seen,
            InteractionName::NotSeen,
            InteractionName::Interested,
            InteractionName::NotInterested,
        ];

        let lists = all_interaction_names.iter().map(|name| List {
            id: name.to_list_id(user_id.clone()),
            created_at_posix: Posix::default(),
            updated_at_posix: Posix::default(),
            deleted_at_posix: None,
            name: name.to_list_name(),
            description: name.to_list_description(),
            creator_user_id: user_id.clone(),
            variant: ListVariant::AutoGenerated,
        });

        Ok(lists.collect())
    }
}

impl InteractionName {
    fn to_list_id(&self, user_id: UserId) -> ListId {
        let name_str = self.to_machine_string();
        let list_id_str = format!("interaction-list-{}-{}", name_str, user_id.as_str());
        let list_id = ListId::new(&list_id_str);
        list_id
    }

    fn to_list_name(&self) -> String {
        self.to_display_string()
    }

    fn to_list_description(&self) -> String {
        " ".to_string()
    }
}
