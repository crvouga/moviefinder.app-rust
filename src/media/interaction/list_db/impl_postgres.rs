use super::interface::MediaInteractionListDb;
use crate::{
    core::{db_conn_sql::interface::DbConnSqlDyn, posix::Posix},
    list::{list::List, list_variant::ListVariant},
    media::interaction::{interaction_name::to_all_interaction_names, list::MediaInteractionList},
    user::user_id::UserId,
};
use async_trait::async_trait;

pub struct ImplPostgres {
    #[allow(dead_code)]
    db_conn_sql: DbConnSqlDyn,
}

impl ImplPostgres {
    #[allow(dead_code)]
    pub fn new(db_conn_sql: DbConnSqlDyn) -> Self {
        Self { db_conn_sql }
    }
}

#[async_trait]
impl MediaInteractionListDb for ImplPostgres {
    async fn find_by_user_id(
        &self,
        user_id: UserId,
    ) -> Result<Vec<MediaInteractionList>, std::io::Error> {
        let lists = to_all_interaction_names()
            .iter()
            .map(|name| MediaInteractionList {
                user_id: user_id.clone(),
                interaction_name: name.clone(),
                list: List {
                    id: name.to_list_id(user_id.clone()),
                    created_at_posix: Posix::default(),
                    updated_at_posix: Posix::default(),
                    deleted_at_posix: None,
                    name: name.to_list_name(),
                    description: name.to_list_description(),
                    creator_user_id: user_id.clone(),
                    variant: ListVariant::AutoGenerated,
                },
            })
            .collect();

        Ok(lists)
    }
}
